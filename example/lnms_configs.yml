#file locations
#path: ../LeeData/
path: ../DCC/

#training parameters
train_tile: 224 #input image size
min_area_thresh: 0.5 # % of object area that must be in crop to be included

#choices for anchor sizes - all 1:1 aspect ratio
#anchor_px: tf.constant([32, 64, 96], dtype=tf.int32) #width/height of square anchors in pixels at input mag.
anchor_px:
 - 32
 - 64
 - 96

#feature network parameters
backbone_stride: 1 #strides in feature generation network convolution
backbone_blocks: 14
backbone_dimension: 256 #number of features generated by rpn convolution

#rpn network parameters
rpn_kernel:
 - 3 #kernel size for rpn convolution
#rpn_padding: same #padding for rpn convolutions
rpn_act_conv:
 - relu #activation for rpn convolutional layers
#rpn_act_objectness: softmax #activation for regression outputs
#rpn_act_regression: linear #activation for regression outputs

neg_max: 128
pos_max: 128
rpn_lmbda: 10.0 #loss weighting for regression loss term for RPN
roialign_tiles: 3.0 #roialign parameter - number of horizontal/vertical tiles in a proposed box
roialign_pool: 2.0 #roialign parameter - number of horizontal/vertical sample locations in each tile

# model hyperparamter settings
num_hidden_layers: 2
final_hidden_layer_features: 128
num_blocks: 8
num_layers_block: 6
block_hidden_layer_features: 256
feature_size: 256
output_layer_features: 128
anchor_size: 2048
activation: relu
final_activation: sigmoid

# training hyperparameter settings
num_epochs: 10
anchor_crop_size: 30
pos_anchor_distance: 21
num_batches: 5

loss_type: clustering

pool_kernel_size: 100

images_per_gradient_update: 3
use_centroids: False

# loss
val_fold: 1
loss_multiplier: 10
loss_label_multiplier: False
loss_type: clustering
weighted_loss: True
neg_pos_loss: True
positive_weight: 1

# experimental
color_dimension: 0
max_tile_size: 2
image_scale: 2

# gradient
compressed_gradient: True
interpolated_gradient: True

# image features
use_image_features: False
cross_scale: 3
cross_boxes: True
combine_box_and_cross: False

# regression
use_reg: False
add_regression_param: 0

# learning NMS
objectness_format: False
reduce_mean: False
manipulate_rpn: False
use_pos_neg_loss: True

# other
initial_prediction_threshold: 0.2
threshold: 0.01
iou_threshold: 0.18

use_distance: False

data_only: False

distributed_training: False

calculate_train_metrics: False



# faster r-cnn inclusion
#choices for anchor sizes - all 1:1 aspect ratio

special_configs:

  # loss_object: tf.keras.losses.MeanAbsoluteError(reduction=tf.keras.losses.Reduction.SUM)
  optimizer: tf.keras.optimizers.Adam(learning_rate=0.0001)

  train_loss: tf.keras.metrics.Mean(name=\'train_loss\')
  train_accuracy: tf.keras.metrics.SparseCategoricalAccuracy(name=\'train_accuracy\')
  test_loss: tf.keras.metrics.Mean(name=\'test_loss\')
  test_accuracy: tf.keras.metrics.SparseCategoricalAccuracy(name=\'test_accuracy\')

  width: tf.constant(configs[\'train_tile\'], tf.int32)
  height: tf.constant(configs[\'train_tile\'], tf.int32)

  loss_object: tf.keras.losses.LogCosh()
  custom_loss: labmda x: x

  feature_extractor: vgg16
