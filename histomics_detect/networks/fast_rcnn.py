import tensorflow as tf


def fast_rcnn(backbone, units=[4096, 4096], activations=['relu', 'relu'], classes=None, 
              pool=2, tiles=3):
    """Generates a fast RCNN model used to refine region-proposal network regressions, and 
    optionally to classify objects.
    
    Parameters
    ----------
    backbone : tf.keras.Model
        The backbone keras model used to generate feature maps from the input image. Used to
        determine the shape of backbone outputs.
    units : array_like
        List of positive integers defining the number of fully connected layers and units to 
        use in the layers shared by the regressor and classifier. Defaults value defines two 
        layers with 4096 units each.
    activations : array_like
        List of strings defining the activations to use in the fully connected layers. 
        Default value defines relu activations.
    classes : int
        Number of classes to use in optional classification layer. Default value of None
        for no classifier.
    pool : int
        RoiAlign parameter. pool^2 is the number of locations to interpolate features 
        at within each tile of each regressed box. Default value 2.
    tiles : int
        RoiAlign parameter. tile^2 is the number of tiles that each regressed 
        box is divided into. Default value 3.

    Outputs
    -------
    fastrcnn : tf.keras.Model
        Fast R-CNN model that consumes features generated by RoiAlign. Inputs are
        N x pool * tiles x pool * tiles x features tensor where N is the number of 
        regressions. Outputs are an N x 4 regressions and optionally N x classes
        softmax classification values.
    """
    
    #create input layer
    fastrcnn_input = tf.keras.Input(shape=(pool*tiles, pool*tiles, backbone.output.shape[-1]))

    #pooling over each roialign tile
    pooled = tf.keras.layers.MaxPool2D(pool_size=(pool, pool), padding='valid')(fastrcnn_input)

    #stack the pooled feature vectors from each tile into a single feature vector
    pooled = tf.reshape(pooled, (tf.shape(pooled)[0], tiles*tiles*backbone.output.shape[-1]))

    #fully connected layers
    for i, (unit, activation) in enumerate(zip(units, activations)):
        if i == 0:
            layer_input = pooled
        else:
            layer_input = x
        x = tf.keras.layers.Dense(unit, activation=activation)(layer_input)

    #terminal layer to generate parameterized regression prediction
    regression_align = tf.keras.layers.Dense(4, activation='linear')(x)
    
    #terminal layer to generate classifications
    if classes is not None:
        classification = tf.keras.layers.Dense(classes, activation='softmax')(x)
        outputs = [regression_align, classification]
    else:
        outputs = [regression_align]
        
    fastrcnn = tf.keras.Model(inputs=fastrcnn_input, outputs=outputs)
    
    return fastrcnn
